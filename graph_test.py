from graph import Graph, Node
from BFS import bfs
from DFS import dfs
from dijkstraaaa import dijkstra

# def test_graph1():
#     g = Graph()
#     # g.add_node("A")
#     # g.add_node("B")
#     # g.add_edge_both("A", "B")
#     assert True


def test_graph2():
    g = Graph()
    s = Node("s")
    w = Node("w")
    r = Node("r")
    v = Node("v")
    t = Node("t")
    x = Node("x")
    u = Node("u")
    y = Node("y")
    g.add_node(s)
    g.add_node(w)
    g.add_node(r)
    g.add_node(v)
    g.add_node(t)
    g.add_node(x)
    g.add_node(u)
    g.add_node(y)
    g.add_edge_both(s, w)
    g.add_edge_both(s, r)
    g.add_edge_both(r, v)
    g.add_edge_both(w, t)
    g.add_edge_both(w, x)
    g.add_edge_both(t, u)
    g.add_edge_both(t, x)
    g.add_edge_both(u, x)
    g.add_edge_both(u, y)
    g.add_edge_both(x, y)
    bfs(g, s)
    g.print_path(s, u)
    assert True


def test_graph3():
    g = Graph()
    s = Node("s")
    w = Node("w")
    r = Node("r")
    v = Node("v")
    t = Node("t")
    x = Node("x")
    u = Node("u")
    y = Node("y")
    z = Node("z")
    g.add_node(u)
    g.add_node(v)
    g.add_node(y)
    g.add_node(x)
    g.add_node(w)
    g.add_node(z)
    g.add_edge(u, v)
    g.add_edge(u, x)
    g.add_edge(v, y)
    g.add_edge(y, x)
    g.add_edge(x, v)
    g.add_edge(w, y)
    g.add_edge(w, z)
    g.add_edge(z, z)
    dfs(g)
    # g.print_path(s, u)
    assert True


def test_djikstraa():
    g = Graph()
    s = Node("s")
    t = Node("t")
    y = Node("y")
    x = Node("x")
    z = Node("z")
    g.add_node(s)
    g.add_node(t)
    g.add_node(y)
    g.add_node(x)
    g.add_node(z)
    g.add_edge(s, y, 5)
    g.add_edge(s, t, 10)
    g.add_edge(t, x, 1)
    g.add_edge(y, t, 3)
    g.add_edge(t, y, 2)
    g.add_edge(z, s, 7)
    g.add_edge(z, x, 6)
    g.add_edge(x, z, 4)
    g.add_edge(y, x, 9)
    g.add_edge(y, z, 2)
    dijkstra(g, s, x)
    g.print_path(s, x)
    assert True


# def test_skriaa():
#     g = Graph()
#     s = Node("s")
#     t = Node("t")
#     y = Node("y")
#     x = Node("x")
#     z = Node("z")
#     g.add_node(s)
#     g.add_node(t)
#     g.add_node(y)
#     g.add_node(x)
#     g.add_node(z)
#     g.add_edge(s, y, 5)
#     g.add_edge(s, t, 10)
#     g.add_edge(t, x, 1)
#     g.add_edge(y, t, 3)
#     g.add_edge(t, y, 2)
#     g.add_edge(z, s, 7)
#     g.add_edge(z, x, 6)
#     g.add_edge(x, z, 4)
#     g.add_edge(y, x, 9)
#     g.add_edge(y, z, 2)
#     bfs(g, s)
#     g.print_path(s, x)
#     assert True


# def test_skriaa2():
#     g = Graph()
#     s = Node("s")
#     t = Node("t")
#     y = Node("y")
#     x = Node("x")
#     z = Node("z")
#     g.add_node(s)
#     g.add_node(t)
#     g.add_node(y)
#     g.add_node(x)
#     g.add_node(z)
#     g.add_edge(s, y, 5)
#     g.add_edge(s, t, 10)
#     g.add_edge(t, x, 1)
#     g.add_edge(y, t, 3)
#     g.add_edge(t, y, 2)
#     g.add_edge(z, s, 7)
#     g.add_edge(z, x, 6)
#     g.add_edge(x, z, 4)
#     g.add_edge(y, x, 9)
#     g.add_edge(y, z, 2)
#     dfs(g)
#     g.print_path(s, x)
#     assert True
